package ch.heigvd.iict.dmg.labo1.indexer;

import ch.heigvd.iict.dmg.labo1.parsers.ParserListener;
import org.apache.lucene.analysis.Analyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.FieldType;
import org.apache.lucene.document.LongPoint;
import org.apache.lucene.document.StoredField;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.IndexOptions;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.IndexWriterConfig.OpenMode;
import org.apache.lucene.queries.function.valuesource.LongFieldSource;
import org.apache.lucene.search.similarities.Similarity;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.Path;

public class CACMIndexer implements ParserListener {

	private Directory dir = null;
	private IndexWriter indexWriter = null;

	private Analyzer analyzer = null;
	private Similarity similarity = null;

	public CACMIndexer(Analyzer analyzer, Similarity similarity) {
		this.analyzer = analyzer;
		this.similarity = similarity;
	}

	public void openIndex() {
		// 1.2. create an index writer config
		IndexWriterConfig iwc = new IndexWriterConfig(analyzer);
		iwc.setOpenMode(OpenMode.CREATE); // create and replace existing index
		iwc.setUseCompoundFile(false); // not pack newly written segments in a compound file:
		
		// keep all segments of index separately on disk
		if (similarity != null)
			iwc.setSimilarity(similarity);
		// 1.3. create index writer

		System.out.println("the analyzer is : " + this.analyzer.toString());
		Path path = null;
		if(this.analyzer.toString().contains("StandardAnalyzer")){
			 path = FileSystems.getDefault().getPath("StandardAnalyzer");
		} else if(this.analyzer.toString().contains("StopAnalyzer")){
			 path = FileSystems.getDefault().getPath("StopAnalyzer");
		} else if(this.analyzer.toString().contains("WhitespaceAnalyzer")) {
			 path = FileSystems.getDefault().getPath("WhitespaceAnalyzer");
		} else if(this.analyzer.toString().contains("EnglishAnalyzer")) {
			 path = FileSystems.getDefault().getPath("EnglishAnalyzer");
		} else if(this.analyzer.toString().contains("ShingleAnalyzerWrapper")){
			path = FileSystems.getDefault().getPath("ShingleAnalyzerWrapper1");
		}




		try {
			this.dir = FSDirectory.open(path);
			this.indexWriter = new IndexWriter(dir, iwc);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void onNewDocument(Long id, String authors, String title, String summary) {

		// 1.4 create document
		Document doc = new Document();
		
		doc.add(new StoredField("id", id));
		
		for (String author : authors.split(";")) {
			doc.add(new StringField("authors", author, Field.Store.YES));

		}
		
		doc.add(new TextField("title", title, Field.Store.YES));

		if (summary != null) {
			FieldType fieldType = new FieldType();
			fieldType.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);	
			fieldType.setStoreTermVectorOffsets(true);// Store Offset
			fieldType.setStoreTermVectors(true);// Store term vector

			doc.add(new Field("summary", summary, fieldType));
		}
			try {
				this.indexWriter.addDocument(doc);

			} catch (IOException e) {
				e.printStackTrace();
			}


	}

	public void finalizeIndex() {
		if (this.indexWriter != null)
			try {
				this.indexWriter.close();
			} catch (IOException e) {
				/* BEST EFFORT */ }
		if (this.dir != null)
			try {
				this.dir.close();

			} catch (IOException e) {
				/* BEST EFFORT */ }
	}

}
